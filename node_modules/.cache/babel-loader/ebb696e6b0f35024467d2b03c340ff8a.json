{"ast":null,"code":"import { CardRank } from \"../types\";\nconst returnCardValue = rank => {\n  let aces = 0,\n    total = 0;\n  if (rank === CardRank.Ace) {\n    aces = 1;\n    total = 11;\n  } else if (rank === CardRank.King || rank === CardRank.Queen || rank === CardRank.Jack || rank === CardRank.Ten) {\n    total = 10;\n  } else {\n    total = Number(rank);\n  }\n  return {\n    aces,\n    total\n  };\n};\nexport const getHandValue = hand => {\n  let total = 0;\n  let aces = 0;\n  for (const card of hand) {\n    const value = returnCardValue(card.rank);\n    aces += value.aces;\n    total += value.total;\n  }\n  while (total > 21 && aces > 0) {\n    total -= 10;\n    aces--;\n  }\n  return total;\n};\nexport const getDealerStartValue = hand => {\n  return returnCardValue(hand[0].rank).total;\n};\nexport const isBlackjack = hand => {\n  if (hand.length !== 2) return false;\n  const ranks = hand.map(c => c.rank);\n  const hasAce = ranks.includes(CardRank.Ace);\n  const hasTenish = ranks.some(r => [CardRank.Ten, CardRank.Jack, CardRank.Queen, CardRank.King].includes(r));\n  return hasAce && hasTenish;\n};","map":{"version":3,"names":["CardRank","returnCardValue","rank","aces","total","Ace","King","Queen","Jack","Ten","Number","getHandValue","hand","card","value","getDealerStartValue","isBlackjack","length","ranks","map","c","hasAce","includes","hasTenish","some","r"],"sources":["C:/Users/larry/Desktop/BaCkEnD Projects/mohammed-senior-take-home-test/src/utils/scoring.ts"],"sourcesContent":["import { CardRank, Hand } from \"../types\";\n\nconst returnCardValue = (rank: CardRank) => {\n  let aces = 0, total = 0;\n  if (rank === CardRank.Ace) {\n    aces = 1;\n    total = 11;\n  } else if (\n    rank === CardRank.King ||\n    rank === CardRank.Queen ||\n    rank === CardRank.Jack ||\n    rank === CardRank.Ten\n  ) {\n    total = 10;\n  } else {\n    total = Number(rank);\n  }\n  return { aces, total }\n}\n\nexport const getHandValue = (hand: Hand): number => {\n  let total = 0;\n  let aces = 0;\n\n  for (const card of hand) {\n    const value = returnCardValue(card.rank)\n    aces += value.aces;\n    total += value.total;\n  }\n\n  while (total > 21 && aces > 0) {\n    total -= 10;\n    aces--;\n  }\n\n  return total;\n};\n\nexport const getDealerStartValue = (hand: Hand): number => {\n  return returnCardValue(hand[0].rank).total;\n};\n\nexport const isBlackjack = (hand: Hand): boolean => {\n  if (hand.length !== 2) return false;\n  const ranks = hand.map((c) => c.rank);\n  const hasAce = ranks.includes(CardRank.Ace);\n  const hasTenish = ranks.some((r) => [CardRank.Ten, CardRank.Jack, CardRank.Queen, CardRank.King].includes(r));\n  return hasAce && hasTenish;\n};"],"mappings":"AAAA,SAASA,QAAQ,QAAc,UAAU;AAEzC,MAAMC,eAAe,GAAIC,IAAc,IAAK;EAC1C,IAAIC,IAAI,GAAG,CAAC;IAAEC,KAAK,GAAG,CAAC;EACvB,IAAIF,IAAI,KAAKF,QAAQ,CAACK,GAAG,EAAE;IACzBF,IAAI,GAAG,CAAC;IACRC,KAAK,GAAG,EAAE;EACZ,CAAC,MAAM,IACLF,IAAI,KAAKF,QAAQ,CAACM,IAAI,IACtBJ,IAAI,KAAKF,QAAQ,CAACO,KAAK,IACvBL,IAAI,KAAKF,QAAQ,CAACQ,IAAI,IACtBN,IAAI,KAAKF,QAAQ,CAACS,GAAG,EACrB;IACAL,KAAK,GAAG,EAAE;EACZ,CAAC,MAAM;IACLA,KAAK,GAAGM,MAAM,CAACR,IAAI,CAAC;EACtB;EACA,OAAO;IAAEC,IAAI;IAAEC;EAAM,CAAC;AACxB,CAAC;AAED,OAAO,MAAMO,YAAY,GAAIC,IAAU,IAAa;EAClD,IAAIR,KAAK,GAAG,CAAC;EACb,IAAID,IAAI,GAAG,CAAC;EAEZ,KAAK,MAAMU,IAAI,IAAID,IAAI,EAAE;IACvB,MAAME,KAAK,GAAGb,eAAe,CAACY,IAAI,CAACX,IAAI,CAAC;IACxCC,IAAI,IAAIW,KAAK,CAACX,IAAI;IAClBC,KAAK,IAAIU,KAAK,CAACV,KAAK;EACtB;EAEA,OAAOA,KAAK,GAAG,EAAE,IAAID,IAAI,GAAG,CAAC,EAAE;IAC7BC,KAAK,IAAI,EAAE;IACXD,IAAI,EAAE;EACR;EAEA,OAAOC,KAAK;AACd,CAAC;AAED,OAAO,MAAMW,mBAAmB,GAAIH,IAAU,IAAa;EACzD,OAAOX,eAAe,CAACW,IAAI,CAAC,CAAC,CAAC,CAACV,IAAI,CAAC,CAACE,KAAK;AAC5C,CAAC;AAED,OAAO,MAAMY,WAAW,GAAIJ,IAAU,IAAc;EAClD,IAAIA,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;EACnC,MAAMC,KAAK,GAAGN,IAAI,CAACO,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAClB,IAAI,CAAC;EACrC,MAAMmB,MAAM,GAAGH,KAAK,CAACI,QAAQ,CAACtB,QAAQ,CAACK,GAAG,CAAC;EAC3C,MAAMkB,SAAS,GAAGL,KAAK,CAACM,IAAI,CAAEC,CAAC,IAAK,CAACzB,QAAQ,CAACS,GAAG,EAAET,QAAQ,CAACQ,IAAI,EAAER,QAAQ,CAACO,KAAK,EAAEP,QAAQ,CAACM,IAAI,CAAC,CAACgB,QAAQ,CAACG,CAAC,CAAC,CAAC;EAC7G,OAAOJ,MAAM,IAAIE,SAAS;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}