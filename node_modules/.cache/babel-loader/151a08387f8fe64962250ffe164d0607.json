{"ast":null,"code":"import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { initGame, hit, stand } from \"../utils/engine\";\nimport { isBlackjack } from \"../utils/scoring\";\nimport { LS_KEYS, WIN } from \"../utils/constant\";\nimport { safeStorage } from \"../utils/safeStorage\";\nconst defaultStats = {\n  wins: 0,\n  losses: 0,\n  draws: 0,\n  blackjacks: 0,\n  rounds: 0,\n  streak: 0,\n  bestStreak: 0\n};\nexport function useBlackjackController(options = {}) {\n  const {\n    topUp = 100,\n    keyboard = true\n  } = options;\n  const [state, setState] = useState(null);\n  const [chips, setChips] = useState(100);\n  const [bet, setBet] = useState(10);\n  const [stats, setStats] = useState(defaultStats);\n  const prevGameOver = useRef(false);\n  const bankrupt = chips <= 0;\n  const inRound = Boolean(state);\n  const roundOver = Boolean(state === null || state === void 0 ? void 0 : state.gameOver);\n  const betInvalid = chips > 0 && (bet < 1 || bet > chips) || chips === 0 && bet !== 0;\n\n  // ---------- Persistence (load once) ----------\n  useEffect(() => {\n    try {\n      const rawChips = safeStorage.getItem(LS_KEYS.chips);\n      const rawBet = safeStorage.getItem(LS_KEYS.bet);\n      const rawStats = safeStorage.getItem(LS_KEYS.stats);\n      if (rawChips) {\n        const n = Number(rawChips);\n        if (!Number.isNaN(n)) setChips(n);\n      }\n      if (rawBet) {\n        const n = Number(rawBet);\n        if (!Number.isNaN(n)) setBet(n);\n      }\n      if (rawStats) {\n        const s = JSON.parse(rawStats);\n        if (s && typeof s === \"object\") setStats({\n          ...defaultStats,\n          ...s\n        });\n      }\n    } catch {\n      // ignore\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    try {\n      safeStorage.setItem(LS_KEYS.chips, String(chips));\n    } catch {}\n  }, [chips]);\n  useEffect(() => {\n    try {\n      safeStorage.setItem(LS_KEYS.bet, String(bet));\n    } catch {}\n  }, [bet]);\n  useEffect(() => {\n    try {\n      safeStorage.setItem(LS_KEYS.stats, JSON.stringify(stats));\n    } catch {}\n  }, [stats]);\n  useEffect(() => {\n    setBet(b => {\n      if (bankrupt) return 0;\n      const next = Math.min(b, chips);\n      return Math.max(1, next);\n    });\n  }, [chips, bankrupt]);\n\n  // ---------- actions ----------\n  const deal = useCallback(() => {\n    if (bankrupt || betInvalid) return;\n    setState(initGame());\n    prevGameOver.current = false;\n  }, [bankrupt, betInvalid]);\n  const hitAction = useCallback(() => {\n    if (!state || bankrupt || betInvalid) return;\n    setState(s => s ? hit(s) : s);\n  }, [bankrupt, betInvalid, state]);\n  const standAction = useCallback(() => {\n    if (!state || bankrupt || betInvalid) return;\n    setState(s => s ? stand(s) : s);\n  }, [bankrupt, betInvalid, state]);\n  const playAgain = useCallback(() => {\n    setState(null);\n    setBet(b => {\n      if (bankrupt) return 0;\n      const next = Math.min(b, chips);\n      return Math.max(1, next);\n    });\n    prevGameOver.current = false;\n  }, [bankrupt, chips]);\n  const addFunds = useCallback(() => {\n    setChips(c => c + topUp);\n  }, [topUp]);\n  const resetBankroll = (amount = 100) => {\n    setChips(amount);\n  };\n  const resetStats = () => {\n    setStats(defaultStats);\n  };\n\n  // ---------- keyboard ----------\n  useEffect(() => {\n    if (!keyboard) return;\n    const onKey = e => {\n      const k = e.key.toLowerCase();\n      if (!inRound) {\n        if (k === \"b\" && bankrupt) addFunds();\n        if (k === \"d\") deal();\n        return;\n      }\n      if (!roundOver) {\n        if (k === \"h\") hitAction();\n        if (k === \"s\") standAction();\n      } else {\n        if (k === \"r\") playAgain();\n      }\n    };\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, [keyboard, inRound, roundOver, bankrupt, betInvalid, chips, state, addFunds, deal, hitAction, playAgain, standAction]);\n\n  // ---------- settlement + stats ----------\n  const gameOver = state === null || state === void 0 ? void 0 : state.gameOver;\n  const draw = state === null || state === void 0 ? void 0 : state.draw;\n  const playerStatus = state === null || state === void 0 ? void 0 : state.playerStatus;\n  const dealerStatus = state === null || state === void 0 ? void 0 : state.dealerStatus;\n  const player = state === null || state === void 0 ? void 0 : state.player;\n  const dealer = state === null || state === void 0 ? void 0 : state.dealer;\n  useEffect(() => {\n    if (!state) return;\n    if (state.gameOver && !prevGameOver.current) {\n      const playerBJ = isBlackjack(state.player);\n      const dealerBJ = isBlackjack(state.dealer);\n      let delta = 0;\n      let outcome = \"draw\";\n      let blackjackWin = false;\n      if (state.draw) {\n        outcome = \"draw\";\n        delta = 0;\n      } else if (state.playerStatus === WIN) {\n        outcome = \"win\";\n        blackjackWin = playerBJ && !dealerBJ;\n        delta = blackjackWin ? Math.floor(bet * 1.5) : bet;\n      } else if (state.dealerStatus === WIN) {\n        outcome = \"loss\";\n        delta = -bet;\n      }\n      if (delta !== 0) setChips(c => c + delta);\n      setStats(s => {\n        const next = {\n          ...s,\n          rounds: s.rounds + 1\n        };\n        if (outcome === \"win\") {\n          next.wins += 1;\n          next.streak += 1;\n          if (next.streak > next.bestStreak) next.bestStreak = next.streak;\n          if (blackjackWin) next.blackjacks += 1;\n        } else if (outcome === \"loss\") {\n          next.losses += 1;\n          next.streak = 0;\n        } else {\n          next.draws += 1;\n        }\n        return next;\n      });\n    }\n    prevGameOver.current = Boolean(state.gameOver);\n  }, [state, gameOver, draw, playerStatus, dealerStatus, player, dealer, bet]);\n  const message = useMemo(() => {\n    if (!inRound) {\n      if (bankrupt) return \"You're broke. Press Add Funds (B) to continue.\";\n      return \"Set your bet and press Deal to start.\";\n    }\n    if (!roundOver) {\n      if (betInvalid) return \"Adjust your bet to continue.\";\n      return state.message;\n    }\n    const s = state;\n    const playerBJ = isBlackjack(s.player);\n    const dealerBJ = isBlackjack(s.dealer);\n    if (s.draw) return `${s.message} (+£0)`;\n    if (s.playerStatus === WIN) {\n      const win = playerBJ && !dealerBJ ? Math.floor(bet * 1.5) : bet;\n      return `${s.message} (+£${win})`;\n    }\n    if (s.dealerStatus === WIN) {\n      return `${s.message} (-£${bet})`;\n    }\n    return s.message;\n  }, [inRound, roundOver, state, betInvalid, bankrupt, bet]);\n  const winRate = useMemo(() => {\n    return stats.rounds > 0 ? Math.round(stats.wins / stats.rounds * 100) : 0;\n  }, [stats.wins, stats.rounds]);\n  return {\n    state,\n    chips,\n    bet,\n    setBet,\n    bankrupt,\n    inRound,\n    roundOver,\n    betInvalid,\n    dealerHoleRevealed: roundOver,\n    message,\n    deal,\n    hit: hitAction,\n    stand: standAction,\n    playAgain,\n    addFunds,\n    resetBankroll,\n    resetStats,\n    stats,\n    winRate,\n    betLocked: inRound\n  };\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","initGame","hit","stand","isBlackjack","LS_KEYS","WIN","safeStorage","defaultStats","wins","losses","draws","blackjacks","rounds","streak","bestStreak","useBlackjackController","options","topUp","keyboard","state","setState","chips","setChips","bet","setBet","stats","setStats","prevGameOver","bankrupt","inRound","Boolean","roundOver","gameOver","betInvalid","rawChips","getItem","rawBet","rawStats","n","Number","isNaN","s","JSON","parse","setItem","String","stringify","b","next","Math","min","max","deal","current","hitAction","standAction","playAgain","addFunds","c","resetBankroll","amount","resetStats","onKey","e","k","key","toLowerCase","window","addEventListener","removeEventListener","draw","playerStatus","dealerStatus","player","dealer","playerBJ","dealerBJ","delta","outcome","blackjackWin","floor","message","win","winRate","round","dealerHoleRevealed","betLocked"],"sources":["C:/Users/larry/Desktop/BaCkEnD Projects/mohammed-senior-take-home-test/src/hooks/useBlackjack.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { BlackjackState } from \"../types\";\nimport { initGame, hit, stand } from \"../utils/engine\";\nimport { isBlackjack } from \"../utils/scoring\";\nimport { LS_KEYS, WIN } from \"../utils/constant\";\nimport { safeStorage } from \"../utils/safeStorage\";\n\ntype Options = {\n  topUp?: number; \n  keyboard?: boolean;\n};\n\ntype Stats = {\n  wins: number;\n  losses: number;\n  draws: number;\n  blackjacks: number;\n  rounds: number;\n  streak: number;\n  bestStreak: number;\n};\n\nconst defaultStats: Stats = {\n  wins: 0,\n  losses: 0,\n  draws: 0,\n  blackjacks: 0,\n  rounds: 0,\n  streak: 0,\n  bestStreak: 0,\n};\n\nexport function useBlackjackController(options: Options = {}) {\n  const { topUp = 100, keyboard = true } = options;\n\n  const [state, setState] = useState<BlackjackState | null>(null);\n\n  const [chips, setChips] = useState<number>(100);\n  const [bet, setBet] = useState<number>(10);\n\n  const [stats, setStats] = useState<Stats>(defaultStats);\n\n\n  const prevGameOver = useRef<boolean>(false);\n\n  const bankrupt = chips <= 0;\n  const inRound = Boolean(state);\n  const roundOver = Boolean(state?.gameOver);\n\n  const betInvalid =\n    (chips > 0 && (bet < 1 || bet > chips)) || (chips === 0 && bet !== 0);\n\n  // ---------- Persistence (load once) ----------\n  useEffect(() => {\n    try {\n      const rawChips = safeStorage.getItem(LS_KEYS.chips);\n      const rawBet = safeStorage.getItem(LS_KEYS.bet);\n      const rawStats = safeStorage.getItem(LS_KEYS.stats);\n      if (rawChips) {\n        const n = Number(rawChips);\n        if (!Number.isNaN(n)) setChips(n);\n      }\n      if (rawBet) {\n        const n = Number(rawBet);\n        if (!Number.isNaN(n)) setBet(n);\n      }\n      if (rawStats) {\n        const s = JSON.parse(rawStats) as Stats;\n        if (s && typeof s === \"object\") setStats({ ...defaultStats, ...s });\n      }\n    } catch {\n      // ignore\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    try {\n      safeStorage.setItem(LS_KEYS.chips, String(chips));\n    } catch {}\n  }, [chips]);\n\n  useEffect(() => {\n    try {\n      safeStorage.setItem(LS_KEYS.bet, String(bet));\n    } catch {}\n  }, [bet]);\n\n  useEffect(() => {\n    try {\n      safeStorage.setItem(LS_KEYS.stats, JSON.stringify(stats));\n    } catch {}\n  }, [stats]);\n\n  useEffect(() => {\n    setBet((b) => {\n      if (bankrupt) return 0;\n      const next = Math.min(b, chips);\n      return Math.max(1, next);\n    });\n  }, [chips, bankrupt]);\n\n  // ---------- actions ----------\n  const deal = useCallback(() => {\n    if (bankrupt || betInvalid) return;\n    setState(initGame());\n    prevGameOver.current = false;\n  }, [bankrupt, betInvalid]);\n\n  const hitAction = useCallback(() => {\n    if (!state || bankrupt || betInvalid) return;\n    setState((s) => (s ? hit(s) : s));\n  }, [bankrupt, betInvalid, state]);\n\n  const standAction = useCallback(() => {\n    if (!state || bankrupt || betInvalid) return;\n    setState((s) => (s ? stand(s) : s));\n  }, [bankrupt, betInvalid, state]);\n\n  const playAgain = useCallback(() => {\n    setState(null);\n    setBet((b) => {\n      if (bankrupt) return 0;\n      const next = Math.min(b, chips);\n      return Math.max(1, next);\n    });\n    prevGameOver.current = false;\n  }, [bankrupt, chips]);\n\n  const addFunds = useCallback(() => {\n    setChips((c) => c + topUp);\n  }, [topUp]);\n\n  const resetBankroll = (amount: number = 100) => {\n    setChips(amount);\n  };\n\n  const resetStats = () => {\n    setStats(defaultStats);\n  };\n\n  // ---------- keyboard ----------\n  useEffect(() => {\n    if (!keyboard) return;\n\n    const onKey = (e: KeyboardEvent) => {\n      const k = e.key.toLowerCase();\n      if (!inRound) {\n        if (k === \"b\" && bankrupt) addFunds();\n        if (k === \"d\") deal();\n        return;\n      }\n      if (!roundOver) {\n        if (k === \"h\") hitAction();\n        if (k === \"s\") standAction();\n      } else {\n        if (k === \"r\") playAgain();\n      }\n    };\n\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, [keyboard, inRound, roundOver, bankrupt, betInvalid, chips, state, addFunds, deal, hitAction, playAgain, standAction]);\n\n  // ---------- settlement + stats ----------\n  const gameOver = state?.gameOver;\n  const draw = state?.draw;\n  const playerStatus = state?.playerStatus;\n  const dealerStatus = state?.dealerStatus;\n  const player = state?.player;\n  const dealer = state?.dealer;\n  useEffect(() => {\n    if (!state) return;\n\n    if (state.gameOver && !prevGameOver.current) {\n      const playerBJ = isBlackjack(state.player);\n      const dealerBJ = isBlackjack(state.dealer);\n\n      let delta = 0;\n      let outcome: \"win\" | \"loss\" | \"draw\" = \"draw\";\n      let blackjackWin = false;\n\n      if (state.draw) {\n        outcome = \"draw\";\n        delta = 0;\n      } else if (state.playerStatus === WIN) {\n        outcome = \"win\";\n        blackjackWin = playerBJ && !dealerBJ;\n        delta = blackjackWin ? Math.floor(bet * 1.5) : bet;\n      } else if (state.dealerStatus === WIN) {\n        outcome = \"loss\";\n        delta = -bet;\n      }\n\n      if (delta !== 0) setChips((c) => c + delta);\n\n      setStats((s) => {\n        const next: Stats = { ...s, rounds: s.rounds + 1 };\n        if (outcome === \"win\") {\n          next.wins += 1;\n          next.streak += 1;\n          if (next.streak > next.bestStreak) next.bestStreak = next.streak;\n          if (blackjackWin) next.blackjacks += 1;\n        } else if (outcome === \"loss\") {\n          next.losses += 1;\n          next.streak = 0;\n        } else {\n          next.draws += 1;\n        }\n        return next;\n      });\n    }\n    prevGameOver.current = Boolean(state.gameOver);\n  }, [state, gameOver, draw, playerStatus, dealerStatus, player, dealer, bet]);\n\n  const message = useMemo(() => {\n    if (!inRound) {\n      if (bankrupt) return \"You're broke. Press Add Funds (B) to continue.\";\n      return \"Set your bet and press Deal to start.\";\n    }\n\n    if (!roundOver) {\n      if (betInvalid) return \"Adjust your bet to continue.\";\n      return state!.message;\n    }\n\n    const s = state!;\n    const playerBJ = isBlackjack(s.player);\n    const dealerBJ = isBlackjack(s.dealer);\n\n    if (s.draw) return `${s.message} (+£0)`;\n    if (s.playerStatus === WIN) {\n      const win = playerBJ && !dealerBJ ? Math.floor(bet * 1.5) : bet;\n      return `${s.message} (+£${win})`;\n    }\n    if (s.dealerStatus === WIN) {\n      return `${s.message} (-£${bet})`;\n    }\n    return s.message;\n  }, [inRound, roundOver, state, betInvalid, bankrupt, bet]);\n\n  const winRate = useMemo(() => {\n    return stats.rounds > 0 ? Math.round((stats.wins / stats.rounds) * 100) : 0;\n  }, [stats.wins, stats.rounds]);\n\n  return {\n    state,\n    chips,\n    bet,\n    setBet,\n\n    bankrupt,\n    inRound,\n    roundOver,\n    betInvalid,\n\n    dealerHoleRevealed: roundOver,\n    message,\n\n    deal,\n    hit: hitAction,\n    stand: standAction,\n    playAgain,\n    addFunds,\n    resetBankroll,\n    resetStats,\n\n    stats,\n    winRate,\n\n    betLocked: inRound,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}